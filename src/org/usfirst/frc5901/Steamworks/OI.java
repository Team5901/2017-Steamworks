// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc5901.Steamworks;

import org.usfirst.frc5901.Steamworks.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

	/*1: A
	 2: B
	 3: X
	 4: Y
	 5: Left Bumper
	 6: Right Bumper
	 7: Back
	 8: Start
	 9: Left Joystick
	 10: Right Joystick
	 
	 The axis on the controller follow this mapping
	 (all output is between -1 and 1)
	1: Left Stick X Axis
	 -Left:Negative ; Right: Positive
	2: Left Stick Y Axis
	 -Up: Negative ; Down: Positive
	3: Triggers
	 -Left: Positive ; Right: Negative
	4: Right Stick X Axis
	 -Left: Negative ; Right: Positive
	5: Right Stick Y Axis
	 -Up: Negative ; Down: Positive
	6: Directional Pad (Not recommended, buggy)
	*/
	
    public Joystick controller1;
    public JoystickButton buttonPickup;
    public JoystickButton buttonPickupStop;
    public JoystickButton buttonGearDrop;
    

    public OI() {
    	
        //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        //%%%%%%%%%%%%% CONTROLLER 1 %%%%%%%%%%%%%%
        //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    	controller1 = new Joystick(0);
    	
       
        //A Button - Collector
    	buttonPickupStop = new JoystickButton(controller1, 1);
    	buttonPickupStop.whenReleased(new StopCollector());
        buttonPickup = new JoystickButton(controller1, 1);
        buttonPickup.whileHeld(new StartCollector());
        
        //B Button - Gear Actuator
        buttonPickup = new JoystickButton(controller1, 2);
        buttonPickup.whileHeld(new DropGear());
        
      //Y Button - Gear Actuator
        buttonPickup = new JoystickButton(controller1, 4);
        buttonPickup.whileHeld(new ResetGear());

    }


    public Joystick getController1() {
        return controller1;
    }

}

